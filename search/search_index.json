{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CWL custom types","text":"<p>This documentation contains proposals for the adoption of CWL custom types to define Earth Observation Application Packages inputs and outputs: </p> <ul> <li>GeoJSON schema, according to the GeoJSON Format;</li> <li>OGC API Processes bounding box input;</li> <li>STAC schama as manifests for EO inputs and outputs as defined in section 6.2.3. Staging Input and Output EO Products of OGC Best Practice;</li> <li>String Formats schema, to supply the missing CWL string format support for JSON Schema 2.x and OpenAPI String Formats.</li> </ul>"},{"location":"newtypes/","title":"How to define new Input/Output types","text":"<p>Defining new Input/Output is a smooth process:</p> <ul> <li>Define a <code>*.yaml</code>\u00a0file that will contain the new Input/Output data schema/format, i.e.<code>geojson.yaml</code>;</li> <li>New\u00a0objects format has to be defined inside an array element;</li> <li>Each new type has few fields that have to be fulfilled:<ul> <li><code>name</code> is the new element name to uniquely identify it inside the new schema;</li> <li><code>type</code> is a self-explanatory field, for the native supported type please refer to the official documentation;</li> <li><code>fields</code> here is where new fields are itemized;</li> </ul> </li> </ul> <pre><code>- name: Point\n  type: record\n  fields:\n</code></pre> <ul> <li>Users can now define their own types (please have a deep look at the array definition):</li> </ul> <pre><code>- name: Item\n  type: record\n  doc: \"This object represents the metadata for an item in a SpatioTemporal Asset Catalog\"\n  fields:\n    - name: stac_version\n      type: string\n      doc: \"STAC version\"\n    - stac_extensions\n      type:\n      - type: array\n        items: string\n      doc: \"STAC extensions\"\n    - name: collection\n      type:\n      - type: array\n        items: string\n      doc: \"The ID of the STAC Collection this Item references to.\"\n    - name: links\n      type:\n      - type: array\n        items: Link\n      doc: \"Links\"\n    - name: assets\n      type:\n      - type: array\n        items: Asset\n</code></pre> <p>where fields can be defined as complex types:</p> <pre><code>- name: BasicDescriptiveFields\n  ...\n\n- name: DateTime\n  ...\n\n- name: Instrument\n  ...\n\n- name: Licensing\n  ...\n\n- name: Provider\n  ...\n\n- name: Link\n  ...\n\n- name: Asset\n  ...\n</code></pre> <ul> <li>Users can now use the new defined type as a validated input, importing first the schema in the CWL description;</li> <li>Then define an input of <code>type</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml#Feature</code>:</li> </ul> <pre><code>cwlVersion: v1.2\nclass: CommandLineTool\nrequirements:\n  ...\n  SchemaDefRequirement:\n    types:\n    - $import: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml\n\ninputs:\n  feature:\n    type: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml#Feature\n    label: \" Feature Input\"\n    doc: \"Input is a Feature.\"\n</code></pre>"},{"location":"experimental/discovery/","title":"Experimental Discovery Inputs","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"geo API - Discovery\"\n</pre> <pre>baseCommand: cat\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/experimental/discovery.yaml\n</pre> <pre>  - class: InitialWorkDirRequirement\n</pre> <pre>    listing:\n</pre> <pre>      - entryname: inputs.yaml\n</pre> <pre>        entry: \"$(inputs.api_endpoint.url.value)\\n---\\n$(inputs.search_request.collections[0])\\n---\\n${ \\n  const bbox = inputs.search_request?.bbox;\\n  if (bbox &amp;&amp; Array.isArray(bbox) &amp;&amp; bbox.length &gt;= 4) {\\n    return \\\"--bbox \\\" + bbox.join(\\\" \\\");\\n  }\\n  return \\\"\\\";\\n}\"\n</pre> <pre>inputs:\n</pre> <pre>  api_endpoint:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml#APIEndpoint\n</pre> <pre>    label: \"STAC API endpoint\"\n</pre> <pre>    doc: \"STAC API endpoint for Landsat-9 data\"\n</pre> <pre>  search_request:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/experimental/discovery.yaml#STACSearchSettings\n</pre> <pre>    label: \"STAC API settings\"\n</pre> <pre>    doc: \"STAC API settings for Landsat-9 data\"\n</pre> <pre>arguments:\n</pre> <pre>  - inputs.yaml\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: discovery-output.yaml\n</pre> <pre>api_endpoint:\n</pre> <pre>  url:\n</pre> <pre>    value: https://planetarycomputer.microsoft.com/api/stac/v1\n</pre> <pre>  headers: []\n</pre> <pre>search_request:\n</pre> <pre>  collections:\n</pre> <pre>    - landsat-c2-l2\n</pre> <pre>  datetime_interval:\n</pre> <pre>    start:\n</pre> <pre>      value: \"2023-10-15T18:00:00\"\n</pre> <pre>    end:\n</pre> <pre>      value: \"2023-10-15T18:59:59\"\n</pre> <pre>  bbox:\n</pre> <pre>    - -118.985\n</pre> <pre>    - 38.432\n</pre> <pre>    - -118.183\n</pre> <pre>    - 38.938\n</pre> <pre>  filter-lang: cql2-json\n</pre> <pre>  filter: {\"op\": \"and\", \"args\": [{\"op\": \"&lt;=\", \"args\": [{\"property\": \"eo:cloud_cover\"}, 60]}, {\"op\": \"&gt;=\", \"args\": [{\"property\": \"eo:cloud_cover\"}, 0]}]}\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/experimental/discovery.cwl' to 'file:///home/runner/work/schemas/schemas/examples/experimental/discovery.cwl'\n</pre> <pre>DEBUG [job discovery.cwl] initializing from file:///home/runner/work/schemas/schemas/examples/experimental/discovery.cwl\n</pre> <pre>DEBUG [job discovery.cwl] {\n</pre> <pre>    \"api_endpoint\": {\n</pre> <pre>        \"url\": {\n</pre> <pre>            \"value\": \"https://planetarycomputer.microsoft.com/api/stac/v1\"\n</pre> <pre>        },\n</pre> <pre>        \"headers\": []\n</pre> <pre>    },\n</pre> <pre>    \"search_request\": {\n</pre> <pre>        \"collections\": [\n</pre> <pre>            \"landsat-c2-l2\"\n</pre> <pre>        ],\n</pre> <pre>        \"datetime_interval\": {\n</pre> <pre>            \"start\": {\n</pre> <pre>                \"value\": \"2023-10-15T18:00:00\"\n</pre> <pre>            },\n</pre> <pre>            \"end\": {\n</pre> <pre>                \"value\": \"2023-10-15T18:59:59\"\n</pre> <pre>            }\n</pre> <pre>        },\n</pre> <pre>        \"bbox\": [\n</pre> <pre>            -118.985,\n</pre> <pre>            38.432,\n</pre> <pre>            -118.183,\n</pre> <pre>            38.938\n</pre> <pre>        ],\n</pre> <pre>        \"filter-lang\": \"cql2-json\",\n</pre> <pre>        \"filter\": {\n</pre> <pre>            \"op\": \"and\",\n</pre> <pre>            \"args\": [\n</pre> <pre>                {\n</pre> <pre>                    \"op\": \"&lt;=\",\n</pre> <pre>                    \"args\": [\n</pre> <pre>                        {\n</pre> <pre>                            \"property\": \"eo:cloud_cover\"\n</pre> <pre>                        },\n</pre> <pre>                        60\n</pre> <pre>                    ]\n</pre> <pre>                },\n</pre> <pre>                {\n</pre> <pre>                    \"op\": \"&gt;=\",\n</pre> <pre>                    \"args\": [\n</pre> <pre>                        {\n</pre> <pre>                            \"property\": \"eo:cloud_cover\"\n</pre> <pre>                        },\n</pre> <pre>                        0\n</pre> <pre>                    ]\n</pre> <pre>                }\n</pre> <pre>            ]\n</pre> <pre>        },\n</pre> <pre>        \"datetime\": null,\n</pre> <pre>        \"datetime-interval\": null,\n</pre> <pre>        \"intersects\": null,\n</pre> <pre>        \"ids\": null,\n</pre> <pre>        \"limit\": null,\n</pre> <pre>        \"fields\": null,\n</pre> <pre>        \"filter-crs\": null,\n</pre> <pre>        \"sortby\": null\n</pre> <pre>    }\n</pre> <pre>}\n</pre> <pre>DEBUG [job discovery.cwl] path mappings is {}\n</pre> <pre>DEBUG [job discovery.cwl] command line bindings is [\n</pre> <pre>    {\n</pre> <pre>        \"position\": [\n</pre> <pre>            -1000000,\n</pre> <pre>            0\n</pre> <pre>        ],\n</pre> <pre>        \"datum\": \"cat\"\n</pre> <pre>    },\n</pre> <pre>    {\n</pre> <pre>        \"position\": [\n</pre> <pre>            0,\n</pre> <pre>            0\n</pre> <pre>        ],\n</pre> <pre>        \"datum\": \"inputs.yaml\"\n</pre> <pre>    }\n</pre> <pre>]\n</pre> <pre>DEBUG [job discovery.cwl] initial work dir {\n</pre> <pre>    \"_:935f6cf4-57c6-4418-bc74-65dac3667e78\": [\n</pre> <pre>        \"https://planetarycomputer.microsoft.com/api/stac/v1\\n---\\nlandsat-c2-l2\\n---\\n--bbox -118.985 38.432 -118.183 38.938\",\n</pre> <pre>        \"/tmp/xuclh0bf/inputs.yaml\",\n</pre> <pre>        \"CreateFile\",\n</pre> <pre>        true\n</pre> <pre>    ]\n</pre> <pre>}\n</pre> <pre>INFO [job discovery.cwl] /tmp/xuclh0bf$ cat \\\n</pre> <pre>    inputs.yaml &gt; /tmp/xuclh0bf/discovery-output.yaml\n</pre> <pre>DEBUG Could not collect memory usage, job ended before monitoring began.\n</pre> <pre>INFO [job discovery.cwl] completed success\n</pre> <pre>DEBUG [job discovery.cwl] outputs {\n</pre> <pre>    \"echo_output\": {\n</pre> <pre>        \"location\": \"file:///tmp/xuclh0bf/discovery-output.yaml\",\n</pre> <pre>        \"basename\": \"discovery-output.yaml\",\n</pre> <pre>        \"nameroot\": \"discovery-output\",\n</pre> <pre>        \"nameext\": \".yaml\",\n</pre> <pre>        \"class\": \"File\",\n</pre> <pre>        \"checksum\": \"sha1$756a816a78cff2ac8d01cdd53654259016f36dc6\",\n</pre> <pre>        \"size\": 112,\n</pre> <pre>        \"http://commonwl.org/cwltool#generation\": 0\n</pre> <pre>    }\n</pre> <pre>}\n</pre> <pre>DEBUG [job discovery.cwl] Removing input staging directory /tmp/2cuuaghf\n</pre> <pre>DEBUG [job discovery.cwl] Removing temporary directory /tmp/f69ctyid\n</pre> <pre>DEBUG Moving /tmp/xuclh0bf/discovery-output.yaml to /home/runner/work/schemas/schemas/docs/experimental/discovery-output.yaml\n</pre> <pre>DEBUG Removing intermediate output directory /tmp/xuclh0bf\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>https://planetarycomputer.microsoft.com/api/stac/v1\n</pre> <pre>---\n</pre> <pre>landsat-c2-l2\n</pre> <pre>---\n</pre> <pre>--bbox -118.985 38.432 -118.183 38.938\n</pre>"},{"location":"experimental/discovery/#experimental-discovery-inputs","title":"Experimental Discovery Inputs\u00b6","text":""},{"location":"experimental/discovery/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"experimental/discovery/#input-example","title":"Input example\u00b6","text":""},{"location":"experimental/discovery/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/experimental/discovery.cwl examples/experimental/discovery.yaml\n</pre> <p>This produces the output:</p>"},{"location":"experimental/process/","title":"Experimental Process Inputs","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"geo API - Processes\"\n</pre> <pre>baseCommand: cat\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/experimental/process.yaml\n</pre> <pre>  - class: InitialWorkDirRequirement\n</pre> <pre>    listing:\n</pre> <pre>      - entryname: inputs.yaml\n</pre> <pre>        entry: |-\n</pre> <pre>          $(inputs.api_endpoint.url.value)\n</pre> <pre>          ---\n</pre> <pre>          $(inputs.execute_request.process_id)\n</pre> <pre>          ---\n</pre> <pre>          $(inputs.execute_request.inputs)\n</pre> <pre>inputs:\n</pre> <pre>  api_endpoint:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml#APIEndpoint\n</pre> <pre>    label: \"OGC API endpoint\"\n</pre> <pre>    doc: \"OGC API endpoint for Landsat-9 data\"\n</pre> <pre>  execute_request:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/experimental/process.yaml#OGCExecuteProcessSettings\n</pre> <pre>    label: \"OGC API Processes settings\"\n</pre> <pre>    doc: \"OGC API Processes settings for Landsat-9 data\"\n</pre> <pre>arguments:\n</pre> <pre>  - inputs.yaml\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: process-output.yaml\n</pre> <pre>\n</pre> <pre>api_endpoint:\n</pre> <pre>  url:\n</pre> <pre>    value: https://planetarycomputer.microsoft.com/api/ogc/processes/v1\n</pre> <pre>  headers: []\n</pre> <pre>execute_request:\n</pre> <pre>  process_id: \"water-body-detection\"\n</pre> <pre>  inputs:\n</pre> <pre>    item:\n</pre> <pre>      class: \"https://raw.githubusercontent.com/eoap/schemas/main/url.yaml#URL\"\n</pre> <pre>      value: \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/landsat-c2-l2/items/LC08_L2SP_042033_20231007_02_T1\"\n</pre> <pre>    aoi: \"-118.985,38.432,-118.183,38.938\"\n</pre> <pre>    bands:\n</pre> <pre>      - \"green\"\n</pre> <pre>      - \"nir08\"\n</pre> <pre>    epsg: \"EPSG:4326\"\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/experimental/process.cwl' to 'file:///home/runner/work/schemas/schemas/examples/experimental/process.cwl'\n</pre> <pre>INFO [job process.cwl] /tmp/q3dfqmpf$ cat \\\n</pre> <pre>    inputs.yaml &gt; /tmp/q3dfqmpf/process-output.yaml\n</pre> <pre>INFO [job process.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>https://planetarycomputer.microsoft.com/api/ogc/processes/v1\n</pre> <pre>---\n</pre> <pre>water-body-detection\n</pre> <pre>---\n</pre> <pre>{\"aoi\": \"-118.985,38.432,-118.183,38.938\", \"bands\": [\"green\", \"nir08\"], \"epsg\": \"EPSG:4326\", \"item\": {\"class\": \"https://raw.githubusercontent.com/eoap/schemas/main/url.yaml#URL\", \"value\": \"https://planetarycomputer.microsoft.com/api/stac/v1/collections/landsat-c2-l2/items/LC08_L2SP_042033_20231007_02_T1\"}}\n</pre>"},{"location":"experimental/process/#experimental-process-inputs","title":"Experimental Process Inputs\u00b6","text":""},{"location":"experimental/process/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"experimental/process/#input-example","title":"Input example\u00b6","text":""},{"location":"experimental/process/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/experimental/process.cwl examples/experimental/process.yaml\n</pre> <p>This produces the output:</p>"},{"location":"geojson/","title":"GeoJSON custom types for CWL","text":"<p>The schema is available at https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml and 1:1 reflects the geojson.org Geometry and Feature schemas.</p> <p>The schema defines: </p> <ul> <li>A <code>Point</code>,  which describes a Point;</li> <li>A <code>LineString</code>,  which describes a LineString;</li> <li>A <code>Polygon</code>,  which describes a Polygon;</li> <li>A <code>MultiPoint</code>,  which describes a MultiPoint;</li> <li>A <code>MultiLineString</code>,  which describes a LineString;</li> <li>A <code>MultiPolygon</code>,  which describes a MultiPolygon;</li> <li>A <code>Feature</code>,  which describes a Feature;</li> <li>A <code>GeometryCollection</code>,  which describes a GeometryCollection.</li> </ul>"},{"location":"geojson/#how-to-use-this-schema","title":"How to use this schema","text":"<p>Users have to import the schema in the CWL description via the SchemaDefRequirement:</p> <pre><code>cwlVersion: v1.2\nclass: CommandLineTool\nrequirements:\n  ...\n  SchemaDefRequirement:\n    types:\n    - $import: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml\n</code></pre>"},{"location":"geojson/feature/","title":"GeoJSON Feature","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo GeoJSON Feature\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml\n</pre> <pre>inputs:\n</pre> <pre>  aoi:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml#Feature\n</pre> <pre>    label: \"Area of interest\"\n</pre> <pre>    doc: \"Area of interest defined in GeoJSON format\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // Validate if type is 'Feature'\n</pre> <pre>          if (inputs.aoi.type !== 'Feature') {\n</pre> <pre>            throw \"Invalid GeoJSON type: expected 'Feature', got '\" + inputs.aoi.type + \"'\";\n</pre> <pre>          }\n</pre> <pre>          // get the Feature geometry type\n</pre> <pre>\n</pre> <pre>          return \"Feature with id '\" + inputs.aoi.id + \"' is of type: \" + inputs.aoi.geometry.type;\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>aoi:\n</pre> <pre>  class: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml#Feature\n</pre> <pre>  id: \"aoi-1\"\n</pre> <pre>  type: \"Feature\"\n</pre> <pre>  bbox:\n</pre> <pre>    - 73.958\n</pre> <pre>    - -40.8003\n</pre> <pre>    - 73.9737\n</pre> <pre>    - 40.7648\n</pre> <pre>  geometry:\n</pre> <pre>    type: MultiPolygon\n</pre> <pre>    coordinates:\n</pre> <pre>      - - - - -73.958\n</pre> <pre>            - 40.8003\n</pre> <pre>          - - -73.9498\n</pre> <pre>            - 40.7968\n</pre> <pre>          - - -73.9737\n</pre> <pre>            - 40.7648\n</pre> <pre>          - - -73.9814\n</pre> <pre>            - 40.7681\n</pre> <pre>          - - -73.958\n</pre> <pre>            - 40.8003\n</pre> <pre>      - - - - -73.958\n</pre> <pre>            - 40.8003\n</pre> <pre>          - - -73.9498\n</pre> <pre>            - 40.7968\n</pre> <pre>          - - -73.9737\n</pre> <pre>            - 40.7648\n</pre> <pre>          - - -73.958\n</pre> <pre>            - 40.8003\n</pre> <pre>    bbox:\n</pre> <pre>      - 73.958\n</pre> <pre>      - -40.8003\n</pre> <pre>      - 73.9737\n</pre> <pre>      - 40.7648\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/geojson/feature.cwl' to 'file:///home/runner/work/schemas/schemas/examples/geojson/feature.cwl'\n</pre> <pre>INFO [job feature.cwl] /tmp/fembj5qp$ echo \\\n</pre> <pre>    'Feature with id '\"'\"'aoi-1'\"'\"' is of type: MultiPolygon' &gt; /tmp/fembj5qp/echo_output.txt\n</pre> <pre>INFO [job feature.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>Feature with id 'aoi-1' is of type: MultiPolygon\n</pre>"},{"location":"geojson/feature/#geojson-feature","title":"GeoJSON Feature\u00b6","text":""},{"location":"geojson/feature/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"geojson/feature/#input-example","title":"Input example\u00b6","text":""},{"location":"geojson/feature/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/geojson/feature.cwl examples/geojson/feature.yaml\n</pre> <p>This produces the output:</p>"},{"location":"geojson/point/","title":"GeoJSON Point","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo GeoJSON Point\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml\n</pre> <pre>inputs:\n</pre> <pre>  point_of_interest:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml#Point\n</pre> <pre>    label: \"Point of Interest\"\n</pre> <pre>    doc: \"Point of interest defined in GeoJSON format\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // Validate if type is 'Point'\n</pre> <pre>          if (inputs.point_of_interest.type !== 'Point') {\n</pre> <pre>            throw \"Invalid GeoJSON type: expected 'Point', got '\" + inputs.point_of_interest.type + \"'\";\n</pre> <pre>          }\n</pre> <pre>          var coordinates = inputs.point_of_interest.coordinates;\n</pre> <pre>\n</pre> <pre>          return \"Point Coordinates: \" + coordinates.join(', ');\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>point_of_interest:\n</pre> <pre>  class: https://raw.githubusercontent.com/eoap/schemas/main/geojson.yaml#Point\n</pre> <pre>  type: Point\n</pre> <pre>  coordinates:\n</pre> <pre>    - 125.6\n</pre> <pre>    - 10.1\n</pre> <pre>  bbox:\n</pre> <pre>    - 125.6\n</pre> <pre>    - 10.1\n</pre> <pre>    - 125.6\n</pre> <pre>    - 10.1\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/geojson/point.cwl' to 'file:///home/runner/work/schemas/schemas/examples/geojson/point.cwl'\n</pre> <pre>INFO [job point.cwl] /tmp/o1jdbq8e$ echo \\\n</pre> <pre>    'Point Coordinates: 125.6, 10.1' &gt; /tmp/o1jdbq8e/echo_output.txt\n</pre> <pre>INFO [job point.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>Point Coordinates: 125.6, 10.1\n</pre>"},{"location":"geojson/point/#geojson-point","title":"GeoJSON Point\u00b6","text":""},{"location":"geojson/point/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"geojson/point/#input-example","title":"Input example\u00b6","text":""},{"location":"geojson/point/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/geojson/point.cwl examples/geojson/point.yaml\n</pre> <p>This produces the output:</p>"},{"location":"ogc/","title":"OGC API Processes custom types for CWL","text":"<p>The schema is available at https://raw.githubusercontent.com/eoap/schemas/main/ogc.yaml and 1:1 reflects the OGC bbox</p>"},{"location":"ogc/#how-to-use-this-schema","title":"How to use this schema","text":"<p>Users have to import the schema in the CWL description via the SchemaDefRequirement:</p> <pre><code>cwlVersion: v1.2\nclass: CommandLineTool\nrequirements:\n  ...\n  SchemaDefRequirement:\n    types:\n    - $import: https://raw.githubusercontent.com/eoap/schemas/main/ogc.yaml\n</code></pre>"},{"location":"ogc/bbox/","title":"OGC Bounding Box","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo OGC BBox\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/ogc.yaml\n</pre> <pre>inputs:\n</pre> <pre>  aoi:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/ogc.yaml#BBox\n</pre> <pre>    label: \"Area of interest\"\n</pre> <pre>    doc: \"Area of interest defined as a bounding box\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // Validate the length of bbox to be either 4 or 6\n</pre> <pre>          var bboxLength = inputs.aoi.bbox.length;\n</pre> <pre>          if (bboxLength !== 4 &amp;&amp; bboxLength !== 6) {\n</pre> <pre>            throw \"Invalid bbox length: bbox must have either 4 or 6 elements.\";\n</pre> <pre>          }\n</pre> <pre>          // Convert bbox array to a space-separated string for echo\n</pre> <pre>          return inputs.aoi.bbox.join(' ') + \" CRS: \" + inputs.aoi.crs;\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>aoi:\n</pre> <pre>  class: \"https://raw.githubusercontent.com/eoap/schemas/main/ogc.yaml#BBox\"\n</pre> <pre>  bbox: [100.0, 0.0, 101.0, 1.0]\n</pre> <pre>  crs: \"CRS84\"\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/ogc/bbox.cwl' to 'file:///home/runner/work/schemas/schemas/examples/ogc/bbox.cwl'\n</pre> <pre>INFO [job bbox.cwl] /tmp/zk1cilbh$ echo \\\n</pre> <pre>    '100 0 101 1 CRS: CRS84' &gt; /tmp/zk1cilbh/echo_output.txt\n</pre> <pre>INFO [job bbox.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>100 0 101 1 CRS: CRS84\n</pre>"},{"location":"ogc/bbox/#ogc-bounding-box","title":"OGC Bounding Box\u00b6","text":""},{"location":"ogc/bbox/#cwl-example","title":"CWL Example\u00b6","text":""},{"location":"ogc/bbox/#input-example","title":"Input example\u00b6","text":""},{"location":"ogc/bbox/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/ogc/bbox.cwl examples/ogc/bbox.yaml &gt; output.json\n</pre> <p>This produces the output:</p>"},{"location":"stac/","title":"STAC custom types for CWL","text":"<p>The schema is available at https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml and 1:1 reflects the SpatioTemporal Asset Catalogs schemas.</p> <p>The schema defines: </p> <ul> <li>A <code>Catalog</code> record,  which describes a Catalog;</li> <li>A <code>Collection</code> record,  which describes a Collection;</li> <li>An <code>Item</code> record,  which describes an Item.</li> </ul>"},{"location":"stac/#how-to-use-this-schema","title":"How to use this schema","text":"<p>Users have to import the schema in the CWL description via the SchemaDefRequirement:</p> <pre><code>cwlVersion: v1.2\nclass: CommandLineTool\nrequirements:\n  ...\n  SchemaDefRequirement:\n    types:\n    - $import: https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml\n</code></pre>"},{"location":"stac/catalog/","title":"STAC Catalog","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo STAC Catalog\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml\n</pre> <pre>inputs:\n</pre> <pre>  stac_catalog:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml#Catalog\n</pre> <pre>    label: \"STAC Catalog\"\n</pre> <pre>    doc: \"STAC Catalog defined in STAC format\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // Validate if type is 'Feature'\n</pre> <pre>          if ('Catalog' !== inputs.stac_catalog.type) {\n</pre> <pre>            throw \"Invalid STAC type: expected 'Catalog', got '\" + inputs.stac_catalog.type + \"'\";\n</pre> <pre>          }\n</pre> <pre>          // get the STAC Catalog description\n</pre> <pre>\n</pre> <pre>          return \"STAC Catalog description: \" + inputs.stac_catalog.description;\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>stac_catalog:\n</pre> <pre>  class: \"https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml#Catalog\"\n</pre> <pre>  id: \"stac-catalog\"\n</pre> <pre>  type: \"Catalog\"\n</pre> <pre>  title: \"STAC Catalog Example\"\n</pre> <pre>  description: \"An example STAC catalog\"\n</pre> <pre>  stac_version: \"1.0.0\"\n</pre> <pre>  stac_extensions:\n</pre> <pre>    - \"https://raw.githubusercontent.com/radiantearth/stac-api-spec/refs/tags/v1.0.0/extensions/eo/v1.0.0/schema.json\"\n</pre> <pre>  links:\n</pre> <pre>    - rel: \"self\"\n</pre> <pre>      href: \"http://example.com/catalog.json\"\n</pre> <pre>      type: \"application/json\"\n</pre> <pre>      title: \"This catalog\"\n</pre> <pre>    - rel: item\n</pre> <pre>      href: \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20220524_0_L2A\"\n</pre> <pre>      type: \"application/json\"\n</pre> <pre>      title: \"This is the input item\"\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/stac/catalog.cwl' to 'file:///home/runner/work/schemas/schemas/examples/stac/catalog.cwl'\n</pre> <pre>INFO [job catalog.cwl] /tmp/7didi995$ echo \\\n</pre> <pre>    'STAC Catalog description: An example STAC catalog' &gt; /tmp/7didi995/echo_output.txt\n</pre> <pre>INFO [job catalog.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>STAC Catalog description: An example STAC catalog\n</pre>"},{"location":"stac/catalog/#stac-catalog","title":"STAC Catalog\u00b6","text":""},{"location":"stac/catalog/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"stac/catalog/#input-example","title":"Input example\u00b6","text":""},{"location":"stac/catalog/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/stac/catalog.cwl examples/stac/catalog.yaml\n</pre> <p>This produces the output:</p>"},{"location":"stac/collection/","title":"STAC Collection","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo STAC Collection\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml\n</pre> <pre>inputs:\n</pre> <pre>  stac_collection:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml#Collection\n</pre> <pre>    label: \"STAC Collection\"\n</pre> <pre>    doc: \"STAC Collection defined in STAC format\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // Validate if type is 'Collection'\n</pre> <pre>          if ('Collection' !== inputs.stac_collection.type) {\n</pre> <pre>            throw \"Invalid STAC type: expected 'Collection', got '\" + inputs.stac_collection.type + \"'\";\n</pre> <pre>          }\n</pre> <pre>          // get the STAC Collection description\n</pre> <pre>\n</pre> <pre>          return \"STAC Collection ID: \" + inputs.stac_collection.id;\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>stac_collection:\n</pre> <pre>  stac_version: \"1.0.0\"\n</pre> <pre>  type: \"Collection\"\n</pre> <pre>  id: collection-id\n</pre> <pre>  description: a collection description\n</pre> <pre>  license: 'Creative Commons Attribution-ShareAlike 4.0 International'\n</pre> <pre>  links:\n</pre> <pre>    - rel: \"self\"\n</pre> <pre>      href: \"./item.json\"\n</pre> <pre>      type: \"application/json\"\n</pre> <pre>      title: \"This collection\"\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/stac/collection.cwl' to 'file:///home/runner/work/schemas/schemas/examples/stac/collection.cwl'\n</pre> <pre>INFO [job collection.cwl] /tmp/yuejz_qs$ echo \\\n</pre> <pre>    'STAC Collection ID: collection-id' &gt; /tmp/yuejz_qs/echo_output.txt\n</pre> <pre>INFO [job collection.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>STAC Collection ID: collection-id\n</pre>"},{"location":"stac/collection/#stac-collection","title":"STAC Collection\u00b6","text":""},{"location":"stac/collection/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"stac/collection/#input-example","title":"Input example\u00b6","text":""},{"location":"stac/collection/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/stac/collection.cwl examples/stac/collection.yaml\n</pre> <p>This produces the output:</p>"},{"location":"stac/item/","title":"STAC Item","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo STAC Item\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml\n</pre> <pre>inputs:\n</pre> <pre>  stac_item:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/stac.yaml#Item\n</pre> <pre>    label: \"STAC Catalog\"\n</pre> <pre>    doc: \"STAC Catalog defined in STAC format\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // Validate if type is 'Feature'\n</pre> <pre>          if ('Feature' != inputs.stac_item.type) {\n</pre> <pre>            throw \"Invalid STAC type: expected 'Feature', got '\" + inputs.stac_item.type + \"'\";\n</pre> <pre>          }\n</pre> <pre>          // get the STAC Item id\n</pre> <pre>\n</pre> <pre>          return \"STAC Item ID: \" + inputs.stac_item.id;\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>stac_item:\n</pre> <pre>  type: Feature\n</pre> <pre>  stac_version: 1.0.0\n</pre> <pre>  stac_extensions:\n</pre> <pre>    - https://stac-extensions.github.io/raster/v1.1.0/schema.json\n</pre> <pre>    - https://stac-extensions.github.io/eo/v1.1.0/schema.json\n</pre> <pre>    - https://stac-extensions.github.io/view/v1.0.0/schema.json\n</pre> <pre>    - https://stac-extensions.github.io/projection/v2.0.0/schema.json\n</pre> <pre>    - https://landsat.usgs.gov/stac/landsat-extension/v1.1.1/schema.json\n</pre> <pre>    - https://stac-extensions.github.io/classification/v2.0.0/schema.json\n</pre> <pre>    - https://stac-extensions.github.io/scientific/v1.0.0/schema.json\n</pre> <pre>  id: LC08_L2SP_042033_20231007_02_T1\n</pre> <pre>  bbox:\n</pre> <pre>    - 8.3986668\n</pre> <pre>    - 47.3783503\n</pre> <pre>    - 8.4571096\n</pre> <pre>    - 47.4058268\n</pre> <pre>  properties:\n</pre> <pre>    gsd: 30\n</pre> <pre>    created: '2023-10-13T09:19:56.326826Z'\n</pre> <pre>    datetime: '2023-10-07T18:33:27.281508Z'\n</pre> <pre>    platform: landsat-8\n</pre> <pre>    description: Landsat Collection 2 Level-2\n</pre> <pre>    instruments:\n</pre> <pre>      - oli\n</pre> <pre>      - tirs\n</pre> <pre>  links:\n</pre> <pre>    - rel: collection\n</pre> <pre>      href: https://planetarycomputer.microsoft.com/api/stac/v1/collections/landsat-c2-l2\n</pre> <pre>      type: application/json\n</pre> <pre>    - rel: parent\n</pre> <pre>      href: https://planetarycomputer.microsoft.com/api/stac/v1/collections/landsat-c2-l2\n</pre> <pre>      type: application/json\n</pre> <pre>    - rel: root\n</pre> <pre>      href: https://planetarycomputer.microsoft.com/api/stac/v1/\n</pre> <pre>      type: application/json\n</pre> <pre>    - rel: cite-as\n</pre> <pre>      href: https://doi.org/10.5066/P9OGBGM6\n</pre> <pre>      title: Landsat 8-9 OLI/TIRS Collection 2 Level-2\n</pre> <pre>    - rel: via\n</pre> <pre>      href: https://landsatlook.usgs.gov/stac-server/collections/landsat-c2l2-sr/items/LC08_L2SP_042033_20231007_20231011_02_T1_SR\n</pre> <pre>      type: application/json\n</pre> <pre>      title: USGS STAC Item\n</pre> <pre>    - rel: via\n</pre> <pre>      href: https://landsatlook.usgs.gov/stac-server/collections/landsat-c2l2-st/items/LC08_L2SP_042033_20231007_20231011_02_T1_ST\n</pre> <pre>      type: application/json\n</pre> <pre>      title: USGS STAC Item\n</pre> <pre>    - rel: preview\n</pre> <pre>      href: https://planetarycomputer.microsoft.com/api/data/v1/item/map?collection=landsat-c2-l2&amp;item=LC08_L2SP_042033_20231007_02_T1\n</pre> <pre>      type: text/html\n</pre> <pre>      title: Map of item\n</pre> <pre>    - rel: derived_from\n</pre> <pre>      href: https://planetarycomputer.microsoft.com/api/stac/v1/collections/landsat-c2-l2/items/LC08_L2SP_042033_20231007_02_T1\n</pre> <pre>    - rel: self\n</pre> <pre>      href: \"/data/work/github/eoap/application-package-patterns/data/LC08_L2SP_042033_20231007_02_T1/LC08_L2SP_042033_20231007_02_T1.json\"\n</pre> <pre>      type: application/json\n</pre> <pre>  assets:\n</pre> <pre>    qa:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_QA.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Surface Temperature Quality Assessment Band\n</pre> <pre>      description: Collection 2 Level-2 Quality Assessment Band (ST_QA) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    ang:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ANG.txt\n</pre> <pre>      type: text/plain\n</pre> <pre>      title: Angle Coefficients File\n</pre> <pre>      description: Collection 2 Level-1 Angle Coefficients File\n</pre> <pre>      roles:\n</pre> <pre>        - metadata\n</pre> <pre>    red:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_B4.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Red Band\n</pre> <pre>      description: Collection 2 Level-2 Red Band (SR_B4) Surface Reflectance\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - reflectance\n</pre> <pre>    blue:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_B2.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Blue Band\n</pre> <pre>      description: Collection 2 Level-2 Blue Band (SR_B2) Surface Reflectance\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - reflectance\n</pre> <pre>    drad:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_DRAD.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Downwelled Radiance Band\n</pre> <pre>      description: Collection 2 Level-2 Downwelled Radiance Band (ST_DRAD) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    emis:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_EMIS.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Emissivity Band\n</pre> <pre>      description: Collection 2 Level-2 Emissivity Band (ST_EMIS) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    emsd:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_EMSD.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Emissivity Standard Deviation Band\n</pre> <pre>      description: Collection 2 Level-2 Emissivity Standard Deviation Band (ST_EMSD) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    trad:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_TRAD.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Thermal Radiance Band\n</pre> <pre>      description: Collection 2 Level-2 Thermal Radiance Band (ST_TRAD) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    urad:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_URAD.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Upwelled Radiance Band\n</pre> <pre>      description: Collection 2 Level-2 Upwelled Radiance Band (ST_URAD) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    atran:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_ATRAN.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Atmospheric Transmittance Band\n</pre> <pre>      description: Collection 2 Level-2 Atmospheric Transmittance Band (ST_ATRAN) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    cdist:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_CDIST.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Cloud Distance Band\n</pre> <pre>      description: Collection 2 Level-2 Cloud Distance Band (ST_CDIST) Surface Temperature Product\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>    green:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_B3.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Green Band\n</pre> <pre>      description: Collection 2 Level-2 Green Band (SR_B3) Surface Reflectance\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - reflectance\n</pre> <pre>    nir08:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_B5.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Near Infrared Band 0.8\n</pre> <pre>      description: Collection 2 Level-2 Near Infrared Band 0.8 (SR_B5) Surface Reflectance\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - reflectance\n</pre> <pre>    lwir11:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_ST_B10.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Surface Temperature Band\n</pre> <pre>      description: Collection 2 Level-2 Thermal Infrared Band (ST_B10) Surface Temperature\n</pre> <pre>      gsd: 100\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - temperature\n</pre> <pre>    swir16:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_B6.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Short-wave Infrared Band 1.6\n</pre> <pre>      description: Collection 2 Level-2 Short-wave Infrared Band 1.6 (SR_B6) Surface Reflectance\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - reflectance\n</pre> <pre>    swir22:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_B7.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Short-wave Infrared Band 2.2\n</pre> <pre>      description: Collection 2 Level-2 Short-wave Infrared Band 2.2 (SR_B7) Surface Reflectance\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - reflectance\n</pre> <pre>    coastal:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_B1.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Coastal/Aerosol Band\n</pre> <pre>      description: Collection 2 Level-2 Coastal/Aerosol Band (SR_B1) Surface Reflectance\n</pre> <pre>      roles:\n</pre> <pre>        - data\n</pre> <pre>        - reflectance\n</pre> <pre>    mtl.txt:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_MTL.txt\n</pre> <pre>      type: text/plain\n</pre> <pre>      title: Product Metadata File (txt)\n</pre> <pre>      description: Collection 2 Level-2 Product Metadata File (txt)\n</pre> <pre>      roles:\n</pre> <pre>        - metadata\n</pre> <pre>    mtl.xml:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_MTL.xml\n</pre> <pre>      type: application/xml\n</pre> <pre>      title: Product Metadata File (xml)\n</pre> <pre>      description: Collection 2 Level-2 Product Metadata File (xml)\n</pre> <pre>      roles:\n</pre> <pre>        - metadata\n</pre> <pre>    mtl.json:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_MTL.json\n</pre> <pre>      type: application/json\n</pre> <pre>      title: Product Metadata File (json)\n</pre> <pre>      description: Collection 2 Level-2 Product Metadata File (json)\n</pre> <pre>      roles:\n</pre> <pre>        - metadata\n</pre> <pre>    qa_pixel:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_QA_PIXEL.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Pixel Quality Assessment Band\n</pre> <pre>      description: Collection 2 Level-1 Pixel Quality Assessment Band (QA_PIXEL)\n</pre> <pre>      roles:\n</pre> <pre>        - cloud\n</pre> <pre>        - cloud-shadow\n</pre> <pre>        - snow-ice\n</pre> <pre>        - water-mask\n</pre> <pre>    qa_radsat:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_QA_RADSAT.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Radiometric Saturation and Terrain Occlusion Quality Assessment Band\n</pre> <pre>      description: Collection 2 Level-1 Radiometric Saturation and Terrain Occlusion Quality Assessment Band (QA_RADSAT)\n</pre> <pre>      roles:\n</pre> <pre>        - saturation\n</pre> <pre>    qa_aerosol:\n</pre> <pre>      href: LC08_L2SP_042033_20231007_20231011_02_T1_SR_QA_AEROSOL.TIF\n</pre> <pre>      type: image/tiff; application=geotiff; profile=cloud-optimized\n</pre> <pre>      title: Aerosol Quality Assessment Band\n</pre> <pre>      description: Collection 2 Level-2 Aerosol Quality Assessment Band (SR_QA_AEROSOL) Surface Reflectance Product\n</pre> <pre>      roles:\n</pre> <pre>        - data-mask\n</pre> <pre>        - water-mask\n</pre> <pre>    tilejson:\n</pre> <pre>      href: tilejson.json\n</pre> <pre>      type: application/json\n</pre> <pre>      title: TileJSON with default rendering\n</pre> <pre>      roles:\n</pre> <pre>        - tiles\n</pre> <pre>    rendered_preview:\n</pre> <pre>      href: preview.png\n</pre> <pre>      type: image/png\n</pre> <pre>      title: Rendered preview\n</pre> <pre>      rel: preview\n</pre> <pre>      roles:\n</pre> <pre>        - overview\n</pre> <pre>  collection: landsat-c2-l2\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/stac/item.cwl' to 'file:///home/runner/work/schemas/schemas/examples/stac/item.cwl'\n</pre> <pre>INFO [job item.cwl] /tmp/l72_xdj_$ echo \\\n</pre> <pre>    'STAC Item ID: LC08_L2SP_042033_20231007_02_T1' &gt; /tmp/l72_xdj_/echo_output.txt\n</pre> <pre>INFO [job item.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>STAC Item ID: LC08_L2SP_042033_20231007_02_T1\n</pre>"},{"location":"stac/item/#stac-item","title":"STAC Item\u00b6","text":"<p>Due to CWL Inputs schema limitations:</p> <ul> <li>STAC Item extension can be declared but they are not supported, since CWL Inputs schema does not support the <code>additionalProperties</code>;</li> <li>Currently, STAC Item <code>geometry</code> field is supported only if its value is <code>null</code>, since discrimination of other types is not fully supported.</li> </ul> <p>So STAC Item support is limited even in its Vanilla form, pass it as a reference as URI for the full support.</p>"},{"location":"stac/item/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"stac/item/#input-example","title":"Input example\u00b6","text":""},{"location":"stac/item/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/stac/catalog.cwl examples/stac/catalog.yaml\n</pre> <p>This produces the output:</p>"},{"location":"string-format/","title":"String Format custom types for CWL","text":"<p>The schema is available at https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml and tries to supply the missing CWL string format support for JSON Schema 2.x and OpenAPI String Formats.</p> CWL Type JSON Schema/OpenAPI Format <code>Date</code> <code>{ \"type\": \"string\", \"format\": \"date\" }</code> <code>DateTime</code> <code>{ \"type\": \"string\", \"format\": \"date-time\" }</code> <code>Duration</code> <code>{ \"type\": \"string\", \"format\": \"duration}</code> <code>Email</code> <code>{ \"type\": \"string\", \"format\": \"email\" }</code> <code>Hostname</code> <code>{ \"type\": \"string\", \"format\": \"hostname\" }</code> <code>IDNEmail</code> <code>{ \"type\": \"string\", \"format\": \"idn-email\" }</code> <code>IDNHostname</code> <code>{ \"type\": \"string\", \"format\": \"idn-hostname\" }</code> <code>IPv6</code> <code>{ \"type\": \"string\", \"format\": \"ipv6\" }</code> <code>IRI</code> <code>{ \"type\": \"string\", \"format\": \"iri\" }</code> <code>IRIReference</code> <code>{ \"type\": \"string\", \"format\": \"iri-reference\" }</code> <code>JsonPointer</code> <code>{ \"type\": \"string\", \"format\": \"json-pointer\" }</code> <code>Password</code> <code>{ \"type\": \"string\", \"format\": \"password\" }</code> <code>RelativeJsonPointer</code> <code>{ \"type\": \"string\", \"format\": \"relative-json-pointer\" }</code> <code>UUID</code> <code>{ \"type\": \"string\", \"format\": \"uuid\" }</code> <code>URI</code> <code>{ \"type\": \"string\", \"format\": \"uri\" }</code> <code>URIReference</code> <code>{ \"type\": \"string\", \"format\": \"uri-reference\" }</code> <code>URITemplate</code> <code>{ \"type\": \"string\", \"format\": \"uri-template\" }</code> <code>Time</code> <code>{ \"type\": \"string\", \"format\": \"time\" }</code> <p>[!WARNING] Due to CWL Inputs/Outputs schema limitations,  <code>{ \"type\": \"string\", \"format\": \"regex\" }</code> aside to <code>pattern</code> cannot be supported.</p>"},{"location":"string-format/#how-to-use-this-schema","title":"How to use this schema","text":"<p>Import the schema in the CWL description:</p> <pre><code>cwlVersion: v1.2\nclass: CommandLineTool\nrequirements:\n  ...\n  SchemaDefRequirement:\n    types:\n    - $import: https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml\n</code></pre>"},{"location":"string-format/datetime/","title":"Datetime","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo Datetime string format\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml\n</pre> <pre>inputs:\n</pre> <pre>  start_time:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml#DateTime\n</pre> <pre>    label: \"Start Time\"\n</pre> <pre>    doc: \"Start time in ISO 8601 format\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // Parse ISO datetime and extract parts\n</pre> <pre>          var date = new Date(inputs.start_time.value);\n</pre> <pre>          if (isNaN(date.getTime())) {\n</pre> <pre>            throw \"Invalid ISO 8601 date format for start_time.\";\n</pre> <pre>          }\n</pre> <pre>\n</pre> <pre>          var dateParts = [\n</pre> <pre>            \"Date Breakdown:\",\n</pre> <pre>            \"Year: \" + date.getUTCFullYear(),\n</pre> <pre>            \"Month: \" + (date.getUTCMonth() + 1),\n</pre> <pre>            \"Day: \" + date.getUTCDate(),\n</pre> <pre>            \"Hour: \" + date.getUTCHours(),\n</pre> <pre>            \"Minute: \" + date.getUTCMinutes(),\n</pre> <pre>            \"Second: \" + date.getUTCSeconds()\n</pre> <pre>          ].join(\"\\n * \");\n</pre> <pre>\n</pre> <pre>          return dateParts;\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>start_time:\n</pre> <pre>  class: https://raw.githubusercontent.com/eoap/schemas/main/ogc.yaml#DateTime\n</pre> <pre>  value: \"2025-06-15T12:34:56Z\"\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/string-format/datetime.cwl' to 'file:///home/runner/work/schemas/schemas/examples/string-format/datetime.cwl'\n</pre> <pre>INFO [job datetime.cwl] /tmp/waev_1t0$ echo \\\n</pre> <pre>    'Date Breakdown:\n</pre> <pre> * Year: 2025\n</pre> <pre> * Month: 6\n</pre> <pre> * Day: 15\n</pre> <pre> * Hour: 12\n</pre> <pre> * Minute: 34\n</pre> <pre> * Second: 56' &gt; /tmp/waev_1t0/echo_output.txt\n</pre> <pre>INFO [job datetime.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>Date Breakdown:\n</pre> <pre> * Year: 2025\n</pre> <pre> * Month: 6\n</pre> <pre> * Day: 15\n</pre> <pre> * Hour: 12\n</pre> <pre> * Minute: 34\n</pre> <pre> * Second: 56\n</pre>"},{"location":"string-format/datetime/#datetime","title":"Datetime\u00b6","text":""},{"location":"string-format/datetime/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"string-format/datetime/#input-example","title":"Input example\u00b6","text":""},{"location":"string-format/datetime/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/string-format/datetime.cwl examples/string-format/datetime.yaml\n</pre> <p>This produces the output:</p>"},{"location":"string-format/uri/","title":"URI","text":"<pre>cwlVersion: v1.2\n</pre> <pre>class: CommandLineTool\n</pre> <pre>label: \"Echo URI string format\"\n</pre> <pre>baseCommand: echo\n</pre> <pre>requirements:\n</pre> <pre>  - class: InlineJavascriptRequirement\n</pre> <pre>  - class: SchemaDefRequirement\n</pre> <pre>    types:\n</pre> <pre>      - $import: https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml\n</pre> <pre>inputs:\n</pre> <pre>  product_uri:\n</pre> <pre>    type: https://raw.githubusercontent.com/eoap/schemas/main/string_format.yaml#URI\n</pre> <pre>    label: \"Product URI\"\n</pre> <pre>    doc: \"Product URI in string format\"\n</pre> <pre>    inputBinding:\n</pre> <pre>      valueFrom: |\n</pre> <pre>        ${\n</pre> <pre>          // parse the URI provided in the input\n</pre> <pre>          var product_uri = inputs.product_uri.value;\n</pre> <pre>\n</pre> <pre>          // Validate the URI format\n</pre> <pre>          var uriPattern = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;\n</pre> <pre>          if (!uriPattern.test(product_uri)) {\n</pre> <pre>            throw \"Invalid URI format: \" + product_uri;\n</pre> <pre>          }\n</pre> <pre>          // Return the URI as a string\n</pre> <pre>          return \"Product URI: \" + product_uri;\n</pre> <pre>        }\n</pre> <pre>outputs:\n</pre> <pre>  echo_output:\n</pre> <pre>    type: stdout\n</pre> <pre>stdout: echo_output.txt\n</pre> <pre>product_uri:\n</pre> <pre>  class: https://raw.githubusercontent.com/eoap/schemas/main/ogc.yaml#URI\n</pre> <pre>  value: \"https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20210708_0_L2A\"\n</pre> <pre>INFO /opt/hostedtoolcache/Python/3.13.5/x64/bin/cwltool 3.1.20250715140722\n</pre> <pre>INFO Resolved '../../examples/string-format/uri.cwl' to 'file:///home/runner/work/schemas/schemas/examples/string-format/uri.cwl'\n</pre> <pre>INFO [job uri.cwl] /tmp/0pxx13rx$ echo \\\n</pre> <pre>    'Product URI: https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20210708_0_L2A' &gt; /tmp/0pxx13rx/echo_output.txt\n</pre> <pre>INFO [job uri.cwl] completed success\n</pre> <pre>INFO Final process status is success\n</pre> <p>The content of the <code>echo_output.txt</code> file is:</p> <pre>Product URI: https://earth-search.aws.element84.com/v0/collections/sentinel-s2-l2a-cogs/items/S2A_10TFK_20210708_0_L2A\n</pre>"},{"location":"string-format/uri/#uri","title":"URI\u00b6","text":""},{"location":"string-format/uri/#cwl-example","title":"CWL example\u00b6","text":""},{"location":"string-format/uri/#input-example","title":"Input example\u00b6","text":""},{"location":"string-format/uri/#execute-the-example","title":"Execute the example\u00b6","text":"<p>Run the example with:</p> <pre>cwltool examples/string-format/uri.cwl examples/string-format/uri.yaml\n</pre> <p>This produces the output:</p>"}]}